/*
 * SwaggerPetstoreLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package io.swagger.petstore.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.swagger.petstore.ApiHelper;
import io.swagger.petstore.Server;
import io.swagger.petstore.exceptions.ApiException;
import io.swagger.petstore.http.request.HttpMethod;
import io.swagger.petstore.models.Order;
import java.io.IOException;
import java.util.Map;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class StoreController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public StoreController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Returns a map of status codes to quantities.
     * @return    Returns the Map of String, Integer response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Map<String, Integer> getInventory() throws ApiException, IOException {
        return prepareGetInventoryRequest().execute();
    }

    /**
     * Returns a map of status codes to quantities.
     * @return    Returns the Map of String, Integer response from the API call
     */
    public CompletableFuture<Map<String, Integer>> getInventoryAsync() {
        try { 
            return prepareGetInventoryRequest().executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getInventory.
     */
    private ApiCall<Map<String, Integer>, ApiException> prepareGetInventoryRequest() throws IOException {
        return new ApiCall.Builder<Map<String, Integer>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER1.value())
                        .path("/store/inventory")
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response,
                                        new TypeReference<Map<String, Integer>>(){}))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * For valid response try integer IDs with value &gt;= 1 and &lt;= 10. Other values will generated
     * exceptions.
     * @param  orderId  Required parameter: ID of pet that needs to be fetched
     * @return    Returns the Order response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Order getOrderById(
            final long orderId) throws ApiException, IOException {
        return prepareGetOrderByIdRequest(orderId).execute();
    }

    /**
     * For valid response try integer IDs with value &gt;= 1 and &lt;= 10. Other values will generated
     * exceptions.
     * @param  orderId  Required parameter: ID of pet that needs to be fetched
     * @return    Returns the Order response from the API call
     */
    public CompletableFuture<Order> getOrderByIdAsync(
            final long orderId) {
        try { 
            return prepareGetOrderByIdRequest(orderId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getOrderById.
     */
    private ApiCall<Order, ApiException> prepareGetOrderByIdRequest(
            final long orderId) throws IOException {
        return new ApiCall.Builder<Order, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER1.value())
                        .path("/store/order/{orderId}")
                        .templateParam(param -> param.key("orderId").value(orderId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Order.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Invalid ID supplied",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Order not found",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * For valid response try integer IDs with positive integer value. Negative or non-integer
     * values will generate API errors.
     * @param  orderId  Required parameter: ID of the order that needs to be deleted
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void deleteOrder(
            final long orderId) throws ApiException, IOException {
        prepareDeleteOrderRequest(orderId).execute();
    }

    /**
     * For valid response try integer IDs with positive integer value. Negative or non-integer
     * values will generate API errors.
     * @param  orderId  Required parameter: ID of the order that needs to be deleted
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> deleteOrderAsync(
            final long orderId) {
        try { 
            return prepareDeleteOrderRequest(orderId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deleteOrder.
     */
    private ApiCall<Void, ApiException> prepareDeleteOrderRequest(
            final long orderId) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER1.value())
                        .path("/store/order/{orderId}")
                        .templateParam(param -> param.key("orderId").value(orderId).isRequired(false)
                                .shouldEncode(true))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Invalid ID supplied",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Order not found",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Place an order for a pet.
     * @param  body  Required parameter: order placed for purchasing the pet
     * @return    Returns the Order response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Order placeOrder(
            final Order body) throws ApiException, IOException {
        return preparePlaceOrderRequest(body).execute();
    }

    /**
     * Place an order for a pet.
     * @param  body  Required parameter: order placed for purchasing the pet
     * @return    Returns the Order response from the API call
     */
    public CompletableFuture<Order> placeOrderAsync(
            final Order body) {
        try { 
            return preparePlaceOrderRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for placeOrder.
     */
    private ApiCall<Order, ApiException> preparePlaceOrderRequest(
            final Order body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Order, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER1.value())
                        .path("/store/order")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Order.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Invalid Order",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}