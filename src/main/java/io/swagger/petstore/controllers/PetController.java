/*
 * SwaggerPetstoreLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package io.swagger.petstore.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.apimatic.core.ApiCall;
import io.apimatic.core.ErrorCase;
import io.apimatic.core.GlobalConfiguration;
import io.apimatic.coreinterfaces.http.request.MutliPartRequestType;
import io.swagger.petstore.ApiHelper;
import io.swagger.petstore.Server;
import io.swagger.petstore.exceptions.ApiException;
import io.swagger.petstore.http.request.HttpMethod;
import io.swagger.petstore.models.ApiResponse;
import io.swagger.petstore.models.Pet;
import io.swagger.petstore.models.Status2Enum;
import io.swagger.petstore.utilities.FileWrapper;
import java.io.IOException;
import java.util.List;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionException;

/**
 * This class lists all the endpoints of the groups.
 */
public final class PetController extends BaseController {

    /**
     * Initializes the controller.
     * @param globalConfig    Configurations added in client.
     */
    public PetController(GlobalConfiguration globalConfig) {
        super(globalConfig);
    }

    /**
     * Returns a single pet.
     * @param  petId  Required parameter: ID of pet to return
     * @return    Returns the Pet response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public Pet getPetById(
            final long petId) throws ApiException, IOException {
        return prepareGetPetByIdRequest(petId).execute();
    }

    /**
     * Returns a single pet.
     * @param  petId  Required parameter: ID of pet to return
     * @return    Returns the Pet response from the API call
     */
    public CompletableFuture<Pet> getPetByIdAsync(
            final long petId) {
        try { 
            return prepareGetPetByIdRequest(petId).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for getPetById.
     */
    private ApiCall<Pet, ApiException> prepareGetPetByIdRequest(
            final long petId) throws IOException {
        return new ApiCall.Builder<Pet, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER1.value())
                        .path("/pet/{petId}")
                        .templateParam(param -> param.key("petId").value(petId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, Pet.class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Invalid ID supplied",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Pet not found",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Updates a pet in the store with form data.
     * @param  petId  Required parameter: ID of pet that needs to be updated
     * @param  name  Optional parameter: Updated name of the pet
     * @param  status  Optional parameter: Updated status of the pet
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void updatePetWithForm(
            final long petId,
            final String name,
            final String status) throws ApiException, IOException {
        prepareUpdatePetWithFormRequest(petId, name, status).execute();
    }

    /**
     * Updates a pet in the store with form data.
     * @param  petId  Required parameter: ID of pet that needs to be updated
     * @param  name  Optional parameter: Updated name of the pet
     * @param  status  Optional parameter: Updated status of the pet
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> updatePetWithFormAsync(
            final long petId,
            final String name,
            final String status) {
        try { 
            return prepareUpdatePetWithFormRequest(petId, name, status).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updatePetWithForm.
     */
    private ApiCall<Void, ApiException> prepareUpdatePetWithFormRequest(
            final long petId,
            final String name,
            final String status) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER1.value())
                        .path("/pet/{petId}")
                        .formParam(param -> param.key("name")
                                .value(name).isRequired(false))
                        .formParam(param -> param.key("status")
                                .value(status).isRequired(false))
                        .templateParam(param -> param.key("petId").value(petId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/x-www-form-urlencoded").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("405",
                                 ErrorCase.setReason("Invalid input",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Deletes a pet.
     * @param  petId  Required parameter: Pet id to delete
     * @param  apiKey  Optional parameter: Example:
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void deletePet(
            final long petId,
            final String apiKey) throws ApiException, IOException {
        prepareDeletePetRequest(petId, apiKey).execute();
    }

    /**
     * Deletes a pet.
     * @param  petId  Required parameter: Pet id to delete
     * @param  apiKey  Optional parameter: Example:
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> deletePetAsync(
            final long petId,
            final String apiKey) {
        try { 
            return prepareDeletePetRequest(petId, apiKey).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for deletePet.
     */
    private ApiCall<Void, ApiException> prepareDeletePetRequest(
            final long petId,
            final String apiKey) throws IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER1.value())
                        .path("/pet/{petId}")
                        .templateParam(param -> param.key("petId").value(petId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("api_key")
                                .value(apiKey).isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.DELETE))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Invalid ID supplied",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Pet not found",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * uploads an image.
     * @param  petId  Required parameter: ID of pet to update
     * @param  additionalMetadata  Optional parameter: Additional data to pass to server
     * @param  file  Optional parameter: file to upload
     * @return    Returns the ApiResponse response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public ApiResponse uploadFile(
            final long petId,
            final String additionalMetadata,
            final FileWrapper file) throws ApiException, IOException {
        return prepareUploadFileRequest(petId, additionalMetadata, file).execute();
    }

    /**
     * uploads an image.
     * @param  petId  Required parameter: ID of pet to update
     * @param  additionalMetadata  Optional parameter: Additional data to pass to server
     * @param  file  Optional parameter: file to upload
     * @return    Returns the ApiResponse response from the API call
     */
    public CompletableFuture<ApiResponse> uploadFileAsync(
            final long petId,
            final String additionalMetadata,
            final FileWrapper file) {
        try { 
            return prepareUploadFileRequest(petId, additionalMetadata, file).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for uploadFile.
     */
    private ApiCall<ApiResponse, ApiException> prepareUploadFileRequest(
            final long petId,
            final String additionalMetadata,
            final FileWrapper file) throws IOException {
        return new ApiCall.Builder<ApiResponse, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER1.value())
                        .path("/pet/{petId}/uploadImage")
                        .formParam(param -> param.key("additionalMetadata")
                                .value(additionalMetadata).isRequired(false))
                        .formParam(param -> param.key("file")
                                .value(file)
                                .multiPartRequestType(MutliPartRequestType.MULTI_PART_FILE)
                                .multipartHeaders("content-type", "application/octect-stream"))
                        .templateParam(param -> param.key("petId").value(petId).isRequired(false)
                                .shouldEncode(true))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserialize(response, ApiResponse.class))
                        .nullify404(false)
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Add a new pet to the store.
     * @param  body  Required parameter: Pet object that needs to be added to the store
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void addPet(
            final Pet body) throws ApiException, IOException {
        prepareAddPetRequest(body).execute();
    }

    /**
     * Add a new pet to the store.
     * @param  body  Required parameter: Pet object that needs to be added to the store
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> addPetAsync(
            final Pet body) {
        try { 
            return prepareAddPetRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for addPet.
     */
    private ApiCall<Void, ApiException> prepareAddPetRequest(
            final Pet body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER1.value())
                        .path("/pet")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.POST))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("405",
                                 ErrorCase.setReason("Invalid input",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Update an existing pet.
     * @param  body  Required parameter: Pet object that needs to be added to the store
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public void updatePet(
            final Pet body) throws ApiException, IOException {
        prepareUpdatePetRequest(body).execute();
    }

    /**
     * Update an existing pet.
     * @param  body  Required parameter: Pet object that needs to be added to the store
     * @return    Returns the void response from the API call
     */
    public CompletableFuture<Void> updatePetAsync(
            final Pet body) {
        try { 
            return prepareUpdatePetRequest(body).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for updatePet.
     */
    private ApiCall<Void, ApiException> prepareUpdatePetRequest(
            final Pet body) throws JsonProcessingException, IOException {
        return new ApiCall.Builder<Void, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER1.value())
                        .path("/pet")
                        .bodyParam(param -> param.value(body))
                        .bodySerializer(() ->  ApiHelper.serialize(body))
                        .headerParam(param -> param.key("Content-Type")
                                .value("application/json").isRequired(false))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.PUT))
                .responseHandler(responseHandler -> responseHandler
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Invalid ID supplied",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("404",
                                 ErrorCase.setReason("Pet not found",
                                (reason, context) -> new ApiException(reason, context)))
                        .localErrorCase("405",
                                 ErrorCase.setReason("Validation exception",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Multiple status values can be provided with comma separated strings.
     * @param  status  Required parameter: Status values that need to be considered for filter
     * @return    Returns the List of Pet response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    public List<Pet> findPetsByStatus(
            final List<Status2Enum> status) throws ApiException, IOException {
        return prepareFindPetsByStatusRequest(status).execute();
    }

    /**
     * Multiple status values can be provided with comma separated strings.
     * @param  status  Required parameter: Status values that need to be considered for filter
     * @return    Returns the List of Pet response from the API call
     */
    public CompletableFuture<List<Pet>> findPetsByStatusAsync(
            final List<Status2Enum> status) {
        try { 
            return prepareFindPetsByStatusRequest(status).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for findPetsByStatus.
     */
    private ApiCall<List<Pet>, ApiException> prepareFindPetsByStatusRequest(
            final List<Status2Enum> status) throws IOException {
        return new ApiCall.Builder<List<Pet>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER1.value())
                        .path("/pet/findByStatus")
                        .queryParam(param -> param.key("status")
                                .value(Status2Enum.toValue(status)))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Pet[].class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Invalid status value",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }

    /**
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @deprecated
     * 
     * @param  tags  Required parameter: Tags to filter by
     * @return    Returns the List of Pet response from the API call
     * @throws    ApiException    Represents error response from the server.
     * @throws    IOException    Signals that an I/O exception of some sort has occurred.
     */
    @Deprecated
    public List<Pet> findPetsByTags(
            final List<String> tags) throws ApiException, IOException {
        return prepareFindPetsByTagsRequest(tags).execute();
    }

    /**
     * Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
     * @deprecated
     * 
     * @param  tags  Required parameter: Tags to filter by
     * @return    Returns the List of Pet response from the API call
     */
    @Deprecated
    public CompletableFuture<List<Pet>> findPetsByTagsAsync(
            final List<String> tags) {
        try { 
            return prepareFindPetsByTagsRequest(tags).executeAsync(); 
        } catch (Exception e) {  
            throw new CompletionException(e); 
        }
    }

    /**
     * Builds the ApiCall object for findPetsByTags.
     */
    private ApiCall<List<Pet>, ApiException> prepareFindPetsByTagsRequest(
            final List<String> tags) throws IOException {
        return new ApiCall.Builder<List<Pet>, ApiException>()
                .globalConfig(getGlobalConfiguration())
                .requestBuilder(requestBuilder -> requestBuilder
                        .server(Server.SERVER1.value())
                        .path("/pet/findByTags")
                        .queryParam(param -> param.key("tags")
                                .value(tags))
                        .headerParam(param -> param.key("accept").value("application/json"))
                        .authenticationKey(BaseController.AUTHENTICATION_KEY)
                        .httpMethod(HttpMethod.GET))
                .responseHandler(responseHandler -> responseHandler
                        .deserializer(
                                response -> ApiHelper.deserializeArray(response,
                                        Pet[].class))
                        .nullify404(false)
                        .localErrorCase("400",
                                 ErrorCase.setReason("Invalid tag value",
                                (reason, context) -> new ApiException(reason, context)))
                        .globalErrorCase(GLOBAL_ERROR_CASES))
                .build();
    }
}